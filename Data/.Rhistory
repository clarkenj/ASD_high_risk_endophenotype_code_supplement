write.table(Pvalue1_combine, file=paste("/home/neuromod/ASD_high_risk_endophenotype_code_supplement/split_net_", subnet, "_p1.tsv", sep=""), sep="\t")
# Load phenotypes
phenos <- read.delim("ABIDE1_Pheno_PSM_matched_ados.tsv")
# Set working directory
#setwd("~/Dropbox/Github/autismclassification/Data")
setwd("/home/neuromod/ASD_high_risk_endophenotype_code_supplement/Data/")
# Load phenotypes
phenos <- read.delim("ABIDE1_Pheno_PSM_matched_ados.tsv")
for (Replicate in 1:100) {
# Initialize an array for the results
Results_array <- array(NA,
c(dim(phenos)[1],4,18))
for (Network in 1:18) {
# Read from file
Read_file <- read.csv(paste('Results_Instance_',Replicate,'_Network_',Network,'.csv',sep = ''),
header = TRUE)
# Store file to array
Results_array[,,Network] <- as.matrix(Read_file[,2:5])
}
# Put array in list
Replicate_list[[Replicate]] <- Results_array
}
if (exists("phenos")) {
print("phenos exists")
} else {
print("phenos does not exist")
}
# Load phenotypes
phenos <- read.delim("/home/neuromod/ASD_high_risk_endophenotype_code_supplement/Data/ABIDE_1_Pheno_PSM_matched_ados.tsv")
classes_var <- 2 - as.numeric(phenos$DX_GROUP)
if (exists("phenos")) {
print("phenos exists")
} else {
print("phenos does not exist")
}
classes_var <- 2 - as.numeric(phenos$DX_GROUP)
unique(phenos$DX_GROUP)
# Load phenotypes
phenos <- read.delim("/home/neuromod/ASD_high_risk_endophenotype_code_supplement/Data/ABIDE1_Pheno_PSM_matched.tsv")
if (exists("phenos")) {
print("phenos exists")
} else {
print("phenos does not exist")
}
# Make storage list
Replicate_list <- list()
for (Replicate in 1:100) {
# Initialize an array for the results
Results_array <- array(NA,
c(dim(phenos)[1],4,18))
for (Network in 1:18) {
# Read from file
Read_file <- read.csv(paste('Results_Instance_',Replicate,'_Network_',Network,'.csv',sep = ''),
header = TRUE)
# Store file to array
Results_array[,,Network] <- as.matrix(Read_file[,2:5])
}
# Put array in list
Replicate_list[[Replicate]] <- Results_array
}
if (FALSE) {
# Make storage list
Replicate_list <- list()
for (Replicate in 1:100) {
# Initialize an array for the results
Results_array <- array(NA,
c(dim(phenos)[1],4,18))
for (Network in 1:18) {
# Read from file
Read_file <- read.csv(paste('Results_Instance_',Replicate,'_Network_',Network,'.csv',sep = ''),
header = TRUE)
# Store file to array
Results_array[,,Network] <- as.matrix(Read_file[,2:5])
}
# Put array in list
Replicate_list[[Replicate]] <- Results_array
}
}
# Make storage list
# Make storage list
Replicate_list <- list()
# Dimensions of Results_array
n_rows <- dim(phenos)[1]
n_cols <- 4
n_networks <- 18
for (Replicate in 1:100) {
# Initialize an array for the results with the correct dimensions
Results_array <- array(NA, dim = c(n_rows, n_cols, n_networks))
for (Network in 1:n_networks) {
# Read from file
Read_file <- read.csv(paste('Results_Instance_', Replicate, '_Network_', Network, '.csv', sep = ''), header = TRUE)
# Store file to array
Results_array[,,Network] <- as.matrix(Read_file[, 2:5])
}
# Put array in list
Replicate_list[[Replicate]] <- Results_array
}
Read_file <- read.csv(paste('Results_Instance_', Replicate, '_Network_', Network, '.csv', sep = ''), header = TRUE)
Read_file <- read.csv(paste('Results_Instance_', Replicate, '_Network_', Network, '.csv', sep = ''), header = TRUE)
# Get the shape of the data
data_shape <- dim(Read_file)
cat("Number of rows: ", data_shape[1], "\n")
cat("Number of columns: ", data_shape[2], "\n")
